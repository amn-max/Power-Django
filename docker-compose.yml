version: "3"

services:
  # PostgreSQL
  db:
    image: postgres:15.5
    hostname: ${DB_HOST}
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    env_file:
      - .env

  keycloak_db:
    image: postgres:15.5
    hostname: keycloak_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    ports:
      - "5433:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  # Redis
  redis:
    restart: unless-stopped
    image: redis:7.2.3
    hostname: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    expose:
      - "${REDIS_PORT}"

  # Django
  web:
    image: power-api
    container_name: power-api
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    hostname: web
    # From documentation:
    # However, Compose does not wait until a container is “ready”
    # (whatever that means for your particular application) - only until it’s
    # running. There’s a good reason for this.
    command: ["./bin/entrypoint.sh"]
    volumes:
      # Mount root to app
      - .:/app
      # Mount entrypoint.sh to run in container
      - ./bin/entrypoint.sh:/app/bin/entrypoint.sh
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      - db
    env_file:
      - .env

  # Nginx
  nginx:
    image: nginx:1.19.0-alpine
    restart: unless-stopped
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - static:/static
    ports:
      - "80:80"
    
    depends_on:
      - web

  # Celery
  worker:
    restart: unless-stopped
    image: power-celery
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A power.celery worker -Q default -n default@%h --loglevel=info --concurrency 1 -E
    volumes:
      - .:/app
    depends_on:
      - web
    env_file:
      - .env

  # Auth
  auth:
    image: quay.io/keycloak/keycloak:legacy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak_db
      DB_DATABASE: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_SCHEMA: public
      DB_PASSWORD: ${DB_PASSWORD}
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Password@123
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - "8080:8080"
      - "9990:9990"
    expose:
      - "8080"
      - "9990"
    depends_on:
      - keycloak_db

volumes:
  postgres-data:
  pgadmin-data:
  static:
  keycloak-data:


